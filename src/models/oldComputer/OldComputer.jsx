/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: anuB_Bios Corp (https://sketchfab.com/anuB_Bios)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/lp-old-computer-low-poly-cartoon-6afe35f1a1274af5861d34409bd392b0
Title: LP old computer low poly cartoon
*/

import React, { useRef, useState } from "react";
import { Html, useGLTF } from "@react-three/drei";
import { Select } from "@react-three/postprocessing";
import { RigidBody } from "@react-three/rapier";
import Screen from "../screen/Screen";
import { PlaneGeometry } from "three";
import "./OldComputer.css";

export function OldComputer(props) {
  const { nodes, materials } = useGLTF("./old_pc.glb");
  return (
    <RigidBody colliders="hull">
      <group {...props} dispose={null} scale={0.0045}>
        <group
          name="Sketchfab_model"
          position={[0, 12.619, 0]}
          rotation={[-Math.PI / 2, 0, 0]}
        >
          <group
            name="LP_old_pc_lowpoly_Cartoonfbx"
            rotation={[Math.PI / 2, 0, 0]}
          >
            <mesh
              name="key_old_pc3_0"
              castShadow
              // receiveShadow
              geometry={nodes.key_old_pc3_0.geometry}
              material={materials.old_pc3}
              rotation={[-Math.PI / 2, 0, 0]}
            />
            <mesh
              name="mon_old_pc2_0"
              castShadow
              // receiveShadow
              geometry={nodes.mon_old_pc2_0.geometry}
              material={materials.old_pc2}
              rotation={[-Math.PI / 2, 0, 0]}
            />
            <mesh
              name="mous_OLD_PC4_0"
              castShadow
              // receiveShadow
              geometry={nodes.mous_OLD_PC4_0.geometry}
              material={materials.OLD_PC4}
              rotation={[-Math.PI / 2, 0, 0]}
            />
            <mesh
              name="proc_old1_0"
              castShadow
              // receiveShadow
              geometry={nodes.proc_old1_0.geometry}
              material={materials.old1}
              rotation={[-Math.PI / 2, 0, 0]}
            />
          </group>
        </group>
        <mesh
          name="screen"
          castShadow
          // receiveShadow
          geometry={nodes.screen.geometry}
          material={nodes.screen.material}
          position={[1.518, 15.037, 0.786]}
          rotation={[0, 0, -Math.PI / 2]}
        >
          <Html
            className="html-screen"
            // style={{height: 'fit'}}
            rotation-x={-Math.PI / 2}
            rotation-z={Math.PI / 2}
            position={[-1.518, 2.7830, 13.133]}
            // position={[0, 0.051, 0]}
            // scale={[0.26, 0.52, 0.1]}
            transform
            occlude
          >
            <Screen />
          </Html>
        </mesh>
      </group>
    </RigidBody>
  );
}

useGLTF.preload("./old_pc.glb");

// export function OldComputer(props) {
//   const { nodes, materials } = useGLTF("./old_pc.glb");
//   const [isOutlineActive, setOutlineStatus] = useState(false);

//   const screenGeometry = new PlaneGeometry(0.1, 0.1);

//   const handlePointerEnter = (e) => {
//     setOutlineStatus(true);
//   };

//   const handlePointerLeave = (e) => {
//     setOutlineStatus(false);
//   };

//   return (
//     <group
//       {...props}
//       dispose={null}
//       scale={0.0003}
//       onPointerOver={handlePointerEnter}
//       onPointerLeave={handlePointerLeave}
//     >
//       <Select enabled={isOutlineActive}>
//         {/* MOUSE */}
//         <RigidBody colliders="hull">
//           <mesh
//             castShadow
//             geometry={nodes.mous_OLD_PC4_0.geometry}
//             material={materials.OLD_PC4}
//             rotation={[-Math.PI / 2, 0, 0]}
//             scale={100}
//           />
//         </RigidBody>
//         {/* KEYBOARD */}
//         <RigidBody colliders="hull">
//           <mesh
//             castShadow
//             geometry={nodes.key_old_pc3_0.geometry}
//             material={materials.old_pc3}
//             rotation={[-Math.PI / 2, 0, 0]}
//             scale={100}
//           />
//         </RigidBody>
//         {/* TOWER */}
//         <RigidBody colliders="hull">
//           <mesh
//             castShadow
//             geometry={nodes.proc_old1_0.geometry}
//             material={materials.old1}
//             rotation={[-Math.PI / 2, 0, 0]}
//             scale={100}
//           />
//         </RigidBody>
//         {/* SCREEN */}
//         <group>
//           <RigidBody colliders="hull">
//             <mesh
//               castShadow
//               geometry={nodes.mon_old_pc2_0.geometry}
//               material={materials.old_pc2}
//               rotation={[-Math.PI / 2, 0, 0]}
//               scale={100}
//             />
//             <mesh position={[0, 0, 0]} geometry={nodes.mon_old_pc2_0.geometry}>
//               <Html position={[0, 0, 0]} >
//                 <div onPointerDown={(e) => e.stopPropagation()}>
//                   <Screen />
//                 </div>
//               </Html>
//             </mesh>
//           </RigidBody>
//         </group>
//       </Select>
//     </group>
//   );
// }

// useGLTF.preload("./old_pc.glb");
